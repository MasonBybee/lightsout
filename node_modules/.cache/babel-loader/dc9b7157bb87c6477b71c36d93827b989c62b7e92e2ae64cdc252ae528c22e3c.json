{"ast":null,"code":"var _jsxFileName = \"/home/mason/Springboard/Exercises/react-lights-out/lightsout/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport Restart from \"./Restart\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.33\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n  const [moves, setMoves] = useState(0);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    // function lightDecider() {\n    //   return Math.random() < chanceLightStartsOn ? true : false;\n    // }\n    for (let i = 0; i < ncols; i++) {\n      const row = [];\n      for (let i = 0; i < nrows; i++) {\n        row.push(false);\n      }\n      initialBoard.push(row);\n    }\n    const randBoard = randomize(initialBoard, chanceLightStartsOn);\n    return randBoard;\n  }\n  function flipCellsAround(coord, oldBoard) {\n    const [y, x] = coord.split(\"-\").map(Number);\n    const flipCell = (y, x, boardCopy) => {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        boardCopy[y][x] = !boardCopy[y][x];\n      }\n    };\n    const deepBoardCopy = JSON.parse(JSON.stringify(oldBoard));\n    const adjacent = [[y, x], [y + 1, x], [y - 1, x], [y, x + 1], [y, x - 1]];\n    for (let [adjY, adjX] of adjacent) {\n      flipCell(adjY, adjX, deepBoardCopy);\n    }\n    return deepBoardCopy;\n  }\n  function clickHandler(coords) {\n    setMoves(m => m + 1);\n    setBoard(oldBoard => {\n      return flipCellsAround(coords, oldBoard);\n    });\n  }\n  function randomize(initBoard, chanceLightStartsOn) {\n    let newBoard = [...initBoard];\n    function randCord() {\n      return Math.floor(Math.random() * 5);\n    }\n    function checkLightsOn(board) {\n      let lightsOn = 0;\n      const cells = board[0].length * board.length;\n      board.map(row => {\n        row.map(cell => {\n          if (cell) {\n            lightsOn++;\n          }\n          return true;\n        });\n        return true;\n      });\n      if (chanceLightStartsOn - 0.05 < lightsOn / cells && chanceLightStartsOn + 0.05 > lightsOn / cells) {\n        return true;\n      } else return false;\n    }\n    let counter = 0;\n    while (true) {\n      const y = randCord();\n      const x = randCord();\n      newBoard = flipCellsAround(`${y}-${x}`, newBoard);\n      if (counter >= 49 && checkLightsOn(newBoard)) {\n        break;\n      }\n      counter++;\n    }\n    return newBoard;\n  }\n  function hasWon(array) {\n    const won = array.every(arr => {\n      return arr.every(n => !n);\n    });\n    return won;\n  }\n  function restartGame() {\n    setMoves(0);\n    setBoard(createBoard());\n  }\n  if (hasWon(board)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-winner\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"Board-youwin\",\n        children: \"You win!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"Board-moves\",\n        children: [\"Moves: \", moves]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Restart, {\n        restartGame: restartGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board \",\n      children: [board.map((n, y) => n.map((cell, x) => {\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          idx: `${y}-${x}`,\n          clickHandler: clickHandler,\n          isLit: cell\n        }, `${y}-${x}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this);\n      })), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"Board-moves\",\n        children: [\"Moves: \", moves]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Restart, {\n        restartGame: restartGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(Board, \"+xgTEzM7d9XYtSfDCvXfrIkKM0w=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Restart","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","moves","setMoves","initialBoard","i","row","push","randBoard","randomize","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","deepBoardCopy","JSON","parse","stringify","adjacent","adjY","adjX","clickHandler","coords","m","initBoard","newBoard","randCord","Math","floor","random","checkLightsOn","lightsOn","cells","length","cell","counter","hasWon","array","won","every","arr","n","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","idx","isLit","_c","$RefreshReg$"],"sources":["/home/mason/Springboard/Exercises/react-lights-out/lightsout/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\nimport Restart from \"./Restart\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.33 }) {\n  const [board, setBoard] = useState(createBoard());\n  const [moves, setMoves] = useState(0);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    // function lightDecider() {\n    //   return Math.random() < chanceLightStartsOn ? true : false;\n    // }\n    for (let i = 0; i < ncols; i++) {\n      const row = [];\n      for (let i = 0; i < nrows; i++) {\n        row.push(false);\n      }\n      initialBoard.push(row);\n    }\n    const randBoard = randomize(initialBoard, chanceLightStartsOn);\n    return randBoard;\n  }\n\n  function flipCellsAround(coord, oldBoard) {\n    const [y, x] = coord.split(\"-\").map(Number);\n\n    const flipCell = (y, x, boardCopy) => {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        boardCopy[y][x] = !boardCopy[y][x];\n      }\n    };\n    const deepBoardCopy = JSON.parse(JSON.stringify(oldBoard));\n    const adjacent = [\n      [y, x],\n      [y + 1, x],\n      [y - 1, x],\n      [y, x + 1],\n      [y, x - 1],\n    ];\n\n    for (let [adjY, adjX] of adjacent) {\n      flipCell(adjY, adjX, deepBoardCopy);\n    }\n    return deepBoardCopy;\n  }\n\n  function clickHandler(coords) {\n    setMoves((m) => m + 1);\n    setBoard((oldBoard) => {\n      return flipCellsAround(coords, oldBoard);\n    });\n  }\n\n  function randomize(initBoard, chanceLightStartsOn) {\n    let newBoard = [...initBoard];\n    function randCord() {\n      return Math.floor(Math.random() * 5);\n    }\n    function checkLightsOn(board) {\n      let lightsOn = 0;\n      const cells = board[0].length * board.length;\n      board.map((row) => {\n        row.map((cell) => {\n          if (cell) {\n            lightsOn++;\n          }\n          return true;\n        });\n        return true;\n      });\n      if (\n        chanceLightStartsOn - 0.05 < lightsOn / cells &&\n        chanceLightStartsOn + 0.05 > lightsOn / cells\n      ) {\n        return true;\n      } else return false;\n    }\n    let counter = 0;\n    while (true) {\n      const y = randCord();\n      const x = randCord();\n      newBoard = flipCellsAround(`${y}-${x}`, newBoard);\n      if (counter >= 49 && checkLightsOn(newBoard)) {\n        break;\n      }\n      counter++;\n    }\n    return newBoard;\n  }\n\n  function hasWon(array) {\n    const won = array.every((arr) => {\n      return arr.every((n) => !n);\n    });\n    return won;\n  }\n  function restartGame() {\n    setMoves(0);\n    setBoard(createBoard());\n  }\n  if (hasWon(board)) {\n    return (\n      <div className=\"Board-winner\">\n        <h1 className=\"Board-youwin\">You win!!</h1>\n        <h4 className=\"Board-moves\">Moves: {moves}</h4>\n        <Restart restartGame={restartGame} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"Board \">\n        {board.map((n, y) =>\n          n.map((cell, x) => {\n            return (\n              <Cell\n                key={`${y}-${x}`}\n                idx={`${y}-${x}`}\n                clickHandler={clickHandler}\n                isLit={cell}\n              />\n            );\n          })\n        )}\n        <h3 className=\"Board-moves\">Moves: {moves}</h3>\n        <Restart restartGame={restartGame} />\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}